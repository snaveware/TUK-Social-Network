// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                   @id @default(autoincrement())
  firstName                 String?
  lastName                  String?
  email                     String                @unique
  bio                       String?
  roleName                  String
  status                    AccountStatus         @default(inactive)
  role                      Role                  @relation(fields: [roleName], references: [name])
  profileAvatarId           Int?                  @unique
  coverImageId              Int?                  @unique
  profileAvatar             File?                 @relation(name: "coverImage", fields: [profileAvatarId], references: [id])
  coverImage                File?                 @relation(name: "profileImage", fields: [coverImageId], references: [id])
  studentProfileIfIsStudent StudentProfile?       @relation(name: "studentProfile")
  staffProfileIfIsStaff     StaffProfile?         @relation(name: "staffProfile")
  followedBy                User[]                @relation(name: "follows")
  follows                   User[]                @relation(name: "follows")
  blockedBy                 User[]                @relation(name: "blocks")
  blocks                    User[]                @relation(name: "blocks")
  noOfFollowers             Int                   @default(0)
  preferences               Preferences?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  chats                     Chat[]                @relation(name: "memberChats")
  groupsIfAdmin             Chat[]                @relation(name: "groupAdmins")
  sentMessages              Message[]             @relation(name: "sender")
  readMessages              Message[]             @relation(name: "readMessages")
  isOnline                  Boolean               @default(false)
  filesOwned                File[]                @relation(name: "fileOwner")
  ownedPosts                Post[]                @relation(name: "ownedPosts")
  repostedPosts             Post[]                @relation(name: "postReposters")
  likedPosts                Post[]                @relation(name: "postLikers")
  likedComments             Comment[]             @relation(name: "commentLikers")
  taggedPosts               Post[]                @relation(name: "taggedPosts")
  sharedPosts               Post[]                @relation(name: "sharedPosts")
  UserChatPreferences       UserChatPreferences[]
  notifications             Notification[]        @relation(name: "toUser")
  savedFiles                File[]                @relation(name: "userFileSaved")
  savedPosts                Post[]                @relation(name: "userPostsSaved")
  refreshTokens             RefreshToken[]
  OTPCode                   String?
  rootFolderId              Int                   @unique
  rootFolder                Folder                @relation(name: "userRootFolder", fields: [rootFolderId], references: [id])
  ownedFolders              Folder[]              @relation(name: "folderOwner")
  comments                  Comment[]
  socketId                  String?
  associatedNotifications   Notification[]        @relation(name: "associatedUser")
  AccessGranted             Access[]

  @@map("users")
}

model RefreshToken {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, token])
  @@map("refreshtokens")
}

model Notification {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(name: "toUser", fields: [userId], references: [id])
  message             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  isDismissed         Boolean  @default(false)
  associatedPost      Post?    @relation(fields: [associatedPostId], references: [id])
  associatedChat      Chat?    @relation(fields: [associatedChatId], references: [id])
  associatedMessage   Message? @relation(fields: [associatedMessageId], references: [id])
  associatedComment   Comment? @relation(fields: [associatedCommentId], references: [id])
  associatedFile      File?    @relation(fields: [associatedFileId], references: [id])
  associatedFolder    Folder?  @relation(fields: [associatedFolderId], references: [id])
  associatedPostId    Int?
  associatedChatId    Int?
  associatedMessageId Int?
  associatedCommentId Int?
  associatedFileId    Int?
  associatedFolderId  Int?
  fileId              Int?
  folderId            Int?
  associatedUserId    Int
  associatedUser      User     @relation(name: "associatedUser", fields: [associatedUserId], references: [id])

  @@map("notifications")
}

enum AccountStatus {
  active
  inactive
  locked
  deleted
}

model Role {
  name        String   @id
  label       String
  description String
  level       Int
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      Int      @unique

  @@map("roles")
}

model Preferences {
  id                              Int              @id @default(autoincrement())
  getMessagePushNotifications     Boolean          @default(true)
  getTaggingPushNotifications     Boolean          @default(true)
  getPostSharingPushNotifications Boolean          @default(true)
  getFileSharedPushNotifications  Boolean          @default(true)
  appearance                      Appearances      @default(automatic)
  user                            User             @relation(fields: [userId], references: [id])
  userId                          Int              @unique
  makeEmailPublic                 Boolean          @default(false)
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime         @updatedAt
  favoriteColor                   String
  defaultAudience                 defaultAudiences @default(public)

  @@map("preferences")
}

enum defaultAudiences {
  public
  private
  followers
  myclass
  myschool
  myfaculty
}

enum colors {
  orange
  green
  pink
  purple
  blue
  teal
  red
}

enum Appearances {
  automatic
  dark
  light
}

model StudentProfile {
  userId              Int      @id
  registrationNumber  String   @unique
  user                User     @relation(name: "studentProfile", fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  class               Class    @relation(fields: [classId], references: [id])
  schoolIfIsSchoolRep School?
  schoolId            Int?
  classId             Int

  @@map("studentprofiles")
}

model StaffProfile {
  userId                  Int      @id
  staffRegistrationNumber String   @unique
  title                   Titles
  position                String   @default("Staff")
  user                    User     @relation(name: "staffProfile", fields: [userId], references: [id], onDelete: Cascade)
  school                  School?  @relation(name: "staffSchool", fields: [schoolId], references: [id])
  faculty                 Faculty? @relation(name: "staffFaculty", fields: [facultyId], references: [id])
  schoolIfIsDirector      School?  @relation(name: "asSchoolDirector")
  facultyIfIsDean         Faculty? @relation(name: "asFacultyDean")
  schoolId                Int?
  facultyId               Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("staffprofiles")
}

enum Titles {
  Prof
  Dr
  Mr
  Ms
  Mrs
}

model Class {
  id            Int              @id @default(autoincrement())
  programmeId   Int
  year          Int
  programme     Programme        @relation(fields: [programmeId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  students      StudentProfile[]
  chat          Chat             @relation(fields: [chatId], references: [id])
  chatId        Int              @unique
  AccessGranted Access[]

  @@unique([programmeId, year])
  @@map("classes")
}

model Programme {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  abbreviation  String   @unique
  schoolId      Int
  school        School   @relation(fields: [schoolId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  classes       Class[]
  AccessGranted Access[]

  @@map("programmes")
}

model School {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  abbreviation String
  facultyId    Int
  faculty      Faculty        @relation(fields: [facultyId], references: [id])
  directorId   Int?           @unique
  director     StaffProfile?  @relation(name: "asSchoolDirector", fields: [directorId], references: [userId])
  staffs       StaffProfile[] @relation(name: "staffSchool")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  programmes   Programme[]

  SchoolRepresentative StudentProfile? @relation(fields: [studentProfileId], references: [userId])
  studentProfileId     Int?            @unique
  chat                 Chat            @relation(fields: [chatId], references: [id])
  chatId               Int             @unique
  AccessGranted        Access[]

  @@map("schools")
}

model Faculty {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  abbreviation    String
  executiveDeanId Int?           @unique
  executiveDean   StaffProfile?  @relation(name: "asFacultyDean", fields: [executiveDeanId], references: [userId])
  schools         School[]
  staffs          StaffProfile[] @relation(name: "staffFaculty")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  AccessGranted   Access[]

  @@map("faculties")
}

// RTC
model Chat {
  id                      Int                   @id @default(autoincrement())
  name                    String
  description             String
  chatType                ChatTypes
  profileAvatarId         Int?                  @unique
  profileAvatar           File?                 @relation(name: "chatProfile", fields: [profileAvatarId], references: [id])
  members                 User[]                @relation(name: "memberChats")
  admins                  User[]                @relation(name: "groupAdmins")
  messages                Message[]
  UserChatPreferences     UserChatPreferences[]
  classIfClassChat        Class?
  roleIfRoleChat          Role?
  schoolIfSchoolChat      School?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  manyChatIfOneToChat     Chat?                 @relation(name: "oneToManyChats", fields: [manyChatId], references: [id])
  oneToManyChats          Chat[]                @relation(name: "oneToManyChats")
  manyChatId              Int?
  associatedNotifications Notification[]
  AccessGranted           Access[]

  @@map("chats")
}

enum ChatTypes {
  class
  role
  school
  group
  private
  public
  one_to_chat
}

model Message {
  id                      Int            @id @default(autoincrement())
  chat                    Chat           @relation(fields: [chatId], references: [id])
  sender                  User           @relation(name: "sender", fields: [senderId], references: [id])
  senderId                Int
  message                 String
  readBy                  User[]         @relation(name: "readMessages")
  status                  MessageStatus  @default(pending)
  replyingTo              Message?       @relation(name: "replies", fields: [replyingToId], references: [id])
  chatId                  Int
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  replies                 Message[]      @relation(name: "replies")
  replyingToId            Int?
  linkedPost              Post?          @relation(fields: [postId], references: [id])
  postId                  Int?
  linkedPoll              Poll?          @relation(fields: [linkedPollId], references: [id])
  linkedPollId            Int?           @unique
  attachedFiles           File[]
  sharedFolders           Folder[]
  senderChatId            Int?
  associatedNotifications Notification[]

  @@map("messages")
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  deleted
}

model UserChatPreferences {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat              Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  backgroundType    BackgroundTypes @default(default)
  backgroundColor   String
  backgroundImage   File?           @relation(fields: [backgroundImageId], references: [id])
  isChatMuted       Boolean
  isChatPinned      Boolean
  pinPosition       Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            Int
  chatId            Int
  backgroundImageId Int?            @unique

  @@map("userchatpreferences")
}

enum BackgroundTypes {
  default
  solid
  image
}

// Posts
model Post {
  id                      Int            @id @default(autoincrement())
  files                   File[]
  caption                 String
  ownerId                 Int
  owner                   User           @relation(name: "ownedPosts", fields: [ownerId], references: [id])
  reposters               User[]         @relation(name: "postReposters")
  likers                  User[]         @relation(name: "postLikers")
  sharedTo                User[]         @relation(name: "sharedPosts")
  taggedUsers             User[]         @relation(name: "taggedPosts")
  noOfRequests            Int            @default(0)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  linkedtoMessages        Message[]
  type                    PostTypes      @default(social)
  linkedPoll              Poll?          @relation(fields: [pollId], references: [id])
  pollId                  Int?           @unique
  savedBy                 User[]         @relation(name: "userPostsSaved")
  comments                Comment[]
  visibility              PostVisibility @default(public)
  associatedNotifications Notification[]
  itemtype                ItemTypes      @default(post)
  accessId                Int            @unique
  Access                  Access         @relation(fields: [accessId], references: [id])

  @@unique([id, itemtype])
  @@map("posts")
}

enum PostVisibility {
  public
  friends
  faculty
  school
}

enum PostTypes {
  social
  event
  sellable
  poll
}

model Poll {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  linkedPost    Post?
  linkedMessage Message?
  question      String
  options       String[]
  results       Json
  itemtype      ItemTypes @default(poll)
  accessId      Int       @unique
  Access        Access    @relation(fields: [accessId], references: [id], onDelete: Cascade)

  @@unique([id, itemtype])
  @@map("polls")
}

model Comment {
  id                      Int            @id @default(autoincrement())
  message                 String
  post                    Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentor               User           @relation(fields: [commentorId], references: [id])
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  postId                  Int
  type                    CommentType    @default(normal)
  replies                 Comment[]      @relation(name: "commentReply")
  aReplyFor               Comment?       @relation(name: "commentReply", fields: [commentId], references: [id])
  commentId               Int?
  commentorId             Int
  likers                  User[]         @relation(name: "commentLikers")
  associatedNotifications Notification[]

  @@map("comments")
}

enum CommentType {
  normal
  reply
}

// Files

model Folder {
  id                      Int            @id @default(autoincrement())
  name                    String
  path                    String
  parentFolder            Folder?        @relation(name: "parentChildFolder", fields: [parentFolderId], references: [id])
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  childFolders            Folder[]       @relation(name: "parentChildFolder")
  parentFolderId          Int?
  files                   File[]
  ownerAsRootFolder       User?          @relation(name: "userRootFolder")
  owner                   User?          @relation(name: "folderOwner", fields: [ownerId], references: [id])
  ownerId                 Int?
  associatedNotifications Notification[]
  accessId                Int            @unique
  Access                  Access         @relation(fields: [accessId], references: [id], onDelete: Cascade)
  sharedInMessage         Message[]

  @@map("folders")
}

model File {
  id                                  Int                  @id @default(autoincrement())
  name                                String
  type                                FileTypes
  path                                String
  userIfProfileAvatar                 User?                @relation(name: "coverImage")
  userIfCoverImage                    User?                @relation(name: "profileImage")
  ownerId                             Int
  owner                               User                 @relation(name: "fileOwner", fields: [ownerId], references: [id])
  chatIfProfile                       Chat?                @relation(name: "chatProfile")
  noOfRequests                        Int                  @default(0)
  createdAt                           DateTime             @default(now())
  updatedAt                           DateTime             @updatedAt
  Post                                Post?                @relation(fields: [postId], references: [id])
  postId                              Int?
  UserChatPreferencesIfChatBackground UserChatPreferences?
  messagesAttachedTo                  Message[]
  savedBy                             User[]               @relation(name: "userFileSaved")
  folder                              Folder?              @relation(fields: [folderId], references: [id])
  folderId                            Int?
  associatedNotifications             Notification[]
  accessId                            Int                  @unique
  Access                              Access               @relation(fields: [accessId], references: [id], onDelete: Cascade)

  @@map("files")
}

enum FileTypes {
  video
  image
  pdf
  word
}

model Access {
  id                   Int         @id @default(autoincrement())
  itemType             ItemTypes
  users                User[]
  schools              School[]
  classes              Class[]
  faculties            Faculty[]
  programmes           Programme[]
  chats                Chat[]
  fileIfItemIsFile     File?
  folderIfItemIsFolder Folder?
  postIfItemIsPost     Post?
  pollIfItemIsPoll     Poll?
  isPublic             Boolean     @default(false)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

enum ItemTypes {
  post
  file
  folder
  poll
}
