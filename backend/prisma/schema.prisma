// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                   @id @default(autoincrement())
  firstName                 String?
  lastName                  String?
  email                     String                @unique
  bio                       String?
  roleName                  String
  status                    AccountStatus         @default(inactive)
  role                      Role                  @relation(fields: [roleName], references: [name])
  profileAvatarId           Int?                  @unique
  coverImageId              Int?                  @unique
  profileAvatar             File?                 @relation(name: "coverImage", fields: [profileAvatarId], references: [id])
  coverImage                File?                 @relation(name: "profileImage", fields: [coverImageId], references: [id])
  studentProfileIfIsStudent StudentProfile?       @relation(name: "studentProfile")
  staffProfileIfIsStaff     StaffProfile?         @relation(name: "staffProfile")
  followedBy                User[]                @relation(name: "follows")
  follows                   User[]                @relation(name: "follows")
  blockedBy                 User[]                @relation(name: "blocks")
  blocks                    User[]                @relation(name: "blocks")
  noOfFollowers             Int                   @default(0)
  preferences               Preferences?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  chats                     Chat[]                @relation(name: "memberChats")
  groupsIfAdmin             Chat[]                @relation(name: "groupAdmin")
  sentMessages              Message[]             @relation(name: "sender")
  receivedMessage           Message[]             @relation(name: "recipient")
  readMessages              Message[]             @relation(name: "readMessages")
  isOnline                  Boolean               @default(false)
  filesOwned                File[]                @relation(name: "fileOwner")
  allowedFiles              File[]                @relation(name: "allowedFileViewers")
  ownedPosts                Post[]                @relation(name: "ownedPosts")
  repostedPosts             Post[]                @relation(name: "postReposters")
  likedPosts                Post[]                @relation(name: "postLikers")
  taggedPosts               Post[]                @relation(name: "taggedPosts")
  sharedPosts               Post[]                @relation(name: "sharedPosts")
  UserChatPreferences       UserChatPreferences[]
  notifications             Notification[]
  savedFiles                File[]                @relation(name: "userFileSaved")
  savedPosts                Post[]                @relation(name: "userPostsSaved")
  refreshTokens             RefreshToken[]
  OTPCode                   String?
  rootFolderId              Int                   @unique
  rootFolder                Folder                @relation(fields: [rootFolderId], references: [id])
  sharedFolders             Folder[]              @relation(name: "allowedFolderViewers")

  @@map("users")
}

model RefreshToken {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, token])
  @@map("refreshtokens")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  @@map("notifications")
}

enum AccountStatus {
  active
  inactive
  locked
  deleted
}

model Role {
  name        String   @id
  label       String
  description String
  level       Int
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      Int      @unique

  @@map("roles")
}

model Preferences {
  id                              Int              @id @default(autoincrement())
  getMessagePushNotifications     Boolean          @default(true)
  getTaggingPushNotifications     Boolean          @default(true)
  getPostSharingPushNotifications Boolean          @default(true)
  getFileSharedPushNotifications  Boolean          @default(true)
  appearance                      Appearances      @default(automatic)
  user                            User             @relation(fields: [userId], references: [id])
  userId                          Int              @unique
  makeEmailPublic                 Boolean          @default(false)
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime         @updatedAt
  favoriteColor                   String
  defaultAudience                 defaultAudiences @default(public)

  @@map("preferences")
}

enum defaultAudiences {
  public
  private
  followers
  myclass
  myschool
  myfaculty
}

enum colors {
  orange
  green
  pink
  purple
  blue
  teal
  red
}

enum Appearances {
  automatic
  dark
  light
}

model StudentProfile {
  userId              Int      @id
  registrationNumber  String   @unique
  user                User     @relation(name: "studentProfile", fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  class               Class    @relation(fields: [classId], references: [id])
  schoolIfIsSchoolRep School?
  schoolId            Int?
  classId             Int

  @@map("studentprofiles")
}

model StaffProfile {
  userId                  Int      @id
  staffRegistrationNumber String   @unique
  title                   Titles
  position                String   @default("Staff")
  user                    User     @relation(name: "staffProfile", fields: [userId], references: [id], onDelete: Cascade)
  school                  School?  @relation(name: "staffSchool", fields: [schoolId], references: [id])
  faculty                 Faculty? @relation(name: "staffFaculty", fields: [facultyId], references: [id])
  schoolIfIsDirector      School?  @relation(name: "asSchoolDirector")
  facultyIfIsDean         Faculty? @relation(name: "asFacultyDean")
  schoolId                Int?
  facultyId               Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("staffprofiles")
}

enum Titles {
  Prof
  Dr
  Mr
  Ms
  Mrs
}

model Class {
  id          Int              @id @default(autoincrement())
  programmeId Int
  year        Int
  programme   Programme        @relation(fields: [programmeId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  students    StudentProfile[]
  chat        Chat             @relation(fields: [chatId], references: [id])
  chatId      Int              @unique

  @@unique([programmeId, year])
  @@map("classes")
}

model Programme {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String   @unique
  schoolId     Int
  school       School   @relation(fields: [schoolId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  classes      Class[]

  @@map("programmes")
}

model School {
  id                   Int             @id @default(autoincrement())
  name                 String          @unique
  abbreviation         String
  facultyId            Int
  faculty              Faculty         @relation(fields: [facultyId], references: [id])
  directorId           Int?            @unique
  director             StaffProfile?   @relation(name: "asSchoolDirector", fields: [directorId], references: [userId])
  staffs               StaffProfile[]  @relation(name: "staffSchool")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  programmes           Programme[]
  sharedFiles          File[]
  SchoolRepresentative StudentProfile? @relation(fields: [studentProfileId], references: [userId])
  studentProfileId     Int?            @unique
  chat                 Chat            @relation(fields: [chatId], references: [id])
  chatId               Int             @unique
  sharedFolders        Folder[]

  @@map("schools")
}

model Faculty {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  abbreviation    String
  executiveDeanId Int?           @unique
  executiveDean   StaffProfile?  @relation(name: "asFacultyDean", fields: [executiveDeanId], references: [userId])
  schools         School[]
  staffs          StaffProfile[] @relation(name: "staffFaculty")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  sharedFiles     File[]
  sharedFolders   Folder[]

  @@map("faculties")
}

// RTC
model Chat {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  chatType            ChatTypes
  profileAvatarId     Int?                  @unique
  profileAvatar       File?                 @relation(name: "chatProfile", fields: [profileAvatarId], references: [id])
  members             User[]                @relation(name: "memberChats")
  adminId             Int?
  admin               User?                 @relation(name: "groupAdmin", fields: [adminId], references: [id])
  allowedViewFiles    File[]                @relation(name: "fileAllowedChats")
  messages            Message[]
  UserChatPreferences UserChatPreferences[]
  classIfClassChat    Class?
  roleIfRoleChat      Role?
  schoolIfSchoolChat  School?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  // Folder              Folder?               @relation(fields: [folderId], references: [id])
  sharedFolders       Folder[]              @relation(name: "folderAllowedChats")

  @@map("chats")
}

enum ChatTypes {
  class
  role
  school
  group
  private
  public
}

model Message {
  id             Int           @id @default(autoincrement())
  chat           Chat          @relation(fields: [chatId], references: [id])
  sender         User          @relation(name: "sender", fields: [senderId], references: [id])
  recipient      User          @relation(name: "recipient", fields: [recipientId], references: [id])
  senderId       Int
  recipientId    Int
  message        String
  readBy         User[]        @relation(name: "readMessages")
  status         MessageStatus @default(pending)
  replyingTo     Message?      @relation(name: "replies", fields: [replyingToId], references: [id])
  chatId         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  replies        Message[]     @relation(name: "replies")
  replyingToId   Int?
  linkedPost     Post?         @relation(fields: [postId], references: [id])
  postId         Int           @unique
  linkedPoll     Poll?         @relation(fields: [pollId], references: [id])
  pollId         Int           @unique
  attachedFile   File          @relation(fields: [attachedFileId], references: [id])
  attachedFileId Int

  @@map("messages")
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  deleted
}

model UserChatPreferences {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat              Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  backgroundType    BackgroundTypes @default(default)
  backgroundColor   String
  backgroundImage   File?           @relation(fields: [backgroundImageId], references: [id])
  isChatMuted       Boolean
  isChatPinned      Boolean
  pinPosition       Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            Int
  chatId            Int
  backgroundImageId Int?            @unique

  @@map("userchatpreferences")
}

enum BackgroundTypes {
  default
  solid
  image
}

// Posts
model Post {
  id               Int            @id @default(autoincrement())
  files            File[]
  caption          String
  ownerId          Int
  owner            User           @relation(name: "ownedPosts", fields: [ownerId], references: [id])
  reposters        User[]         @relation(name: "postReposters")
  likers           User[]         @relation(name: "postLikers")
  sharedTo         User[]         @relation(name: "sharedPosts")
  taggedUsers      User[]         @relation(name: "taggedPosts")
  noOfRequests     Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  linkedtoMessages Message[]
  type             PostTypes      @default(social)
  linkedPoll       Poll?          @relation(fields: [pollId], references: [id])
  pollId           Int?           @unique
  savedBy          User[]         @relation(name: "userPostsSaved")
  comments         Comment[]
  visibility       PostVisibility @default(public)

  @@map("posts")
}

enum PostVisibility {
  public
  friends
  faculty
  school
}

enum PostTypes {
  social
  event
  sellable
  poll
}

model Poll {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  linkedPost    Post?
  linkedMessage Message?
  question      String
  options       String[]
  results       Json

  @@map("polls")
}

model Comment {
  id        Int         @id @default(autoincrement())
  message   String
  post      Post        @relation(fields: [postId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  postId    Int
  type      CommentType @default(normal)
  replies   Comment[]   @relation(name: "commentReply")
  aReplyFor Comment?    @relation(name: "commentReply", fields: [commentId], references: [id])
  commentId Int?

  @@map("comments")
}

enum CommentType {
  normal
  reply
}

// Files

model Folder {
  id                     Int            @id @default(autoincrement())
  name                   String
  path                   String
  parentFolder           Folder?        @relation(name: "parentChildFolder", fields: [parentFolderId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  childFolders           Folder[]       @relation(name: "parentChildFolder")
  parentFolderId         Int?
  files                  File[]
  owner                  User?
  userId                 Int?
  visibility             FileVisibility @default(private)
  allowedViewers         User[]         @relation(name: "allowedFolderViewers")
  allowedViewerChats     Chat[]         @relation(name: "folderAllowedChats")
  allowedViewerSchools   School[]
  allowedViewerFaculties Faculty[]

  @@map("folders")
}

model File {
  id                                  Int                  @id @default(autoincrement())
  name                                String
  type                                FileTypes
  path                                String
  userIfProfileAvatar                 User?                @relation(name: "coverImage")
  userIfCoverImage                    User?                @relation(name: "profileImage")
  ownerId                             Int
  owner                               User                 @relation(name: "fileOwner", fields: [ownerId], references: [id])
  chatIfProfile                       Chat?                @relation(name: "chatProfile")
  visibility                          FileVisibility       @default(private)
  allowedViewers                      User[]               @relation(name: "allowedFileViewers")
  allowedViewerChats                  Chat[]               @relation(name: "fileAllowedChats")
  allowedViewerSchools                School[]
  allowedViewerFaculties              Faculty[]
  noOfRequests                        Int                  @default(0)
  createdAt                           DateTime             @default(now())
  updatedAt                           DateTime             @updatedAt
  Post                                Post?                @relation(fields: [postId], references: [id])
  postId                              Int?
  UserChatPreferencesIfChatBackground UserChatPreferences?
  messagesAttachedTo                  Message[]
  savedBy                             User[]               @relation(name: "userFileSaved")
  folder                              Folder?              @relation(fields: [folderId], references: [id])
  folderId                            Int?

  @@map("files")
}

enum FileTypes {
  video
  image
  pdf
  word
}

enum FileVisibility {
  public
  private
  protected
}
